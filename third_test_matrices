#%% Cell 1
import numpy as np
import pandas as pd
import math
#os.chdir(r"C:\Users\nadja\OneDrive\Bureau\code")
#%%


#%%
def compute_coeffs(r,sigma,T,N,i,theta,delta):
    alpha = -0.5*sigma**2
    beta =0.5*(sigma**2)-r
    gamma = r
    dx=10*sigma*math.sqrt(T)/N
    dt=T/365 ####new #####
    if i!=0 and i!=N:
        omega = theta*dt*(2*alpha/dx**2 -gamma)-1
        a = (1-theta)*dt*(-2*alpha/dx**2+gamma)-1
        b=theta*dt*(alpha/dx**2-beta/(2*dx))
        c =theta*dt*(alpha/dx**2+beta/(2*dx))
        d=(1-theta)*dt*(alpha/dx**2+beta/(2*dx))
        e=(1-theta)*dt*(alpha/dx**2-beta/(2*dx))    
    if i==0 :
        omega=-theta*dt*(alpha/dx**2-beta/dx+gamma)-1
        a=(1-theta)*dt*(alpha/dx**2-beta/dx+gamma)-1
        b=theta*dt*(beta/dx-2*alpha/dx**2)
        c=(1-theta)*dt*(beta/dx-2*alpha/dx**2)
        d=theta*dt*alpha/dx**2
        e=(1-theta)*dt*alpha/dx**2
    if i==N :
        print("c'est N")
        omega=-theta*dt*(alpha/dx**2+beta/dx+gamma)-1
        a=(1-theta)*dt*(alpha/dx**2+beta/dx+gamma)-1
        b=-theta*dt*(2*alpha/dx**2+beta/dx)
        c=-(1-theta)*dt*(2*alpha/dx**2+beta/dx)
        d=theta*dt*alpha/dx**2
        e=(1-theta)*dt*alpha/dx**2
    return(omega,a,b,c,d,e)
         
#%%

def A_prime(r,sigma,T,N,theta,delta):
    A_p = np.zeros((N+1,N+1))

    diag_low_first = [compute_coeffs(r, sigma, T, N, 1, theta, delta)[5] for i in range(1,N)]
    diag_low=np.append(diag_low_first,[compute_coeffs(r, sigma, T, N, 0, theta, delta)[3]])



    diag_first = [compute_coeffs(r, sigma, T, N, 1, theta, delta)[1] for i in range(N)]
    diag_first[0]=compute_coeffs(r, sigma, T, N, N, theta, delta)[5]
    diag=np.append(diag_first,[compute_coeffs(r, sigma, T, N, 0, theta, delta)[5]])

    diag_up = [compute_coeffs(r, sigma, T, N, 5, theta, delta)[4] for i in range(N)]
    diag_up[0]=compute_coeffs(r, sigma, T, N, N, theta, delta)[3]
    
    np.fill_diagonal(A_p[1:,:-1],diag_low)
    np.fill_diagonal(A_p,diag)
    np.fill_diagonal(A_p[:-1,1:],diag_up)

    A_p[0,2]=compute_coeffs(r, sigma, T, N, N, theta, delta)[1]
    A_p[N,-3]=compute_coeffs(r, sigma, T, N, 0, theta, delta)[1]
    #print("aaadlfjreji",compute_coeffs(r, sigma, T, N, 0, theta, delta)[1])
    return A_p
def A_pp(r,sigma,T,N,theta,delta):
  A_2p = np.zeros((N+1,N+1))
  diag_low = [compute_coeffs(r, sigma, T, N, 1, theta, delta)[2] for i in range(N)] #osef coef
  diag_low[-1]=compute_coeffs(r, sigma, T, N, 0, theta, delta)[2]

  diag_first=[0 for i in range(N)]
  diag=np.append(diag_first,[compute_coeffs(r, sigma, T, N, 0, theta, delta)[4]])
  diag[0]=compute_coeffs(r, sigma, T, N, N, theta, delta)[4]

  diag_up = [compute_coeffs(r, sigma, T, N, 1, theta, delta)[3] for i in range(N)] #osef coef
  diag_up[0]=compute_coeffs(r, sigma, T, N, N, theta, delta)[2]
  print(diag_low)
  np.fill_diagonal(A_2p[1:,:-1],diag_low)
  np.fill_diagonal(A_2p,diag)
  np.fill_diagonal(A_2p[:-1,1:],diag_up)


  return A_2p
def Omega(r,sigma,T,N,theta,delta):
  L_om= np.full(N+1,compute_coeffs(r, sigma, T, N, 1, theta, delta)[0]) #osef coeff
  Om = np.diag(L_om)
  Om[0,0] = compute_coeffs(r, sigma, T, N, N, theta, delta)[0]
  Om[N,N] = compute_coeffs(r, sigma, T, N, 0, theta, delta)[0]
  return Om
  
def system(r,sigma,T,N,theta,delta):
  A_p = A_prime(r,sigma,T,N,theta,delta)
  
  A_pprime = A_pp(r,sigma,T,N,theta,delta)
  #print("aaaa",pd.DataFrame(A_p))

  om=Omega(r,sigma,T,N,theta,delta)
  A=np.dot(np.linalg.inv(om-A_pprime),A_p)
  b=np.transpose([delta*T/365 for i in range(N+1)])
  #print(pd.DataFrame(A))
  #print("dfdfrfr",np.linalg.inv(om-A_pprime))
  b=np.dot(np.linalg.inv(om-A_pprime),b)
  
  return A,b
def solve_system(A,b,X):
  for i in range(365):
      X=np.dot(A,X)+b
  return X




    
N=7
sigma=0.05
r=0.05
T=4
delta=0
theta = 0.50
Smax=np.log(100)+5*sigma*np.sqrt(T)
dx=10*sigma*math.sqrt(T)/N

K=99

X1=np.array([Smax-i*dx for i in range(N+1)])
X2=np.array([math.exp(i) for i in X1])
X=np.array([max(i-K,0) for i in X2])
#A,b=system(r,sigma,T,N,theta,delta)

pd.set_option("display.max_rows", None, "display.max_columns", None)

print(pd.DataFrame(Omega(r,sigma,T,N,theta,delta)))

#print(solve_system(A,b,X)[90:105])






#print(X,np.log(Smax))
#aa=matrices(r,sigma,T,N,theta,delta,X)
#print(pd.DataFrame(aa))
#print(aa[97:102])
